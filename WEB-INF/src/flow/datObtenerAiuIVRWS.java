package flow;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 1 DE ABRIL DE 2022 09:49:32 AM COT
 */
public class datObtenerAiuIVRWS extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 1 DE ABRIL DE 2022 09:49:32 AM COT
	 */
	public datObtenerAiuIVRWS() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;
		try {
			actions = new java.util.ArrayList(6);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("ConsultaObtenerAiuIvr:idPrestador", "pacDigitaNIT:value", false).setDebugId(285));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("ConsultaObtenerAiuIvr:documento", "pacDigitaIdentificacion:value", false).setDebugId(286));
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "NIT ->", "ConsultaObtenerAiuIvr:idPrestador").setDebugId(290));
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "DOCUMENTO ->", "ConsultaObtenerAiuIvr:documento").setDebugId(291));

			//{{START:CODEGEN:EXTENSIONPOINT:com.avaya.sce.ws2.avResourceType
			actions.add(new connectivity.ws.operations.ConsultaIVR(mySession).setDebugId(287));
			//}}END:CODEGEN:EXTENSIONPOINT:com.avaya.sce.ws2.avResourceType

			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "RESPUESTA ->", "ConsultaObtenerAiuIvr:result").setDebugId(292));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "ConsultaObtenerAiuIvr:result", com.avaya.sce.runtime.Expression.INT_EQUAL, "0", false).setDebugId(202)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("datTransfer", "NoExisteNumValidacion").setDebugId(208));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("menAudioValidacion", "ExisteNumValidacion").setDebugId(204));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		} catch (java.io.IOException e1) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.CaptureException(e1).setDebugId(-1));
			actions.add(new com.avaya.sce.runtime.Next("datTransfer", "ErrorWS").setDebugId(210));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
